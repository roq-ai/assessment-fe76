generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model assessment {
  id                                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                                String                @db.VarChar(255)
  hr_manager_id                        String?               @db.Uuid
  team_leader_id                       String?               @db.Uuid
  created_at                           DateTime              @default(now()) @db.Timestamp(6)
  updated_at                           DateTime              @default(now()) @db.Timestamp(6)
  user_assessment_hr_manager_idTouser  user?                 @relation("assessment_hr_manager_idTouser", fields: [hr_manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_assessment_team_leader_idTouser user?                 @relation("assessment_team_leader_idTouser", fields: [team_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee_assessment                  employee_assessment[]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee_assessment {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id   String?     @db.Uuid
  assessment_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  assessment    assessment? @relation(fields: [assessment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?       @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                      String                @unique @db.VarChar(255)
  firstName                                  String?               @db.VarChar(255)
  lastName                                   String?               @db.VarChar(255)
  roq_user_id                                String                @db.VarChar(255)
  tenant_id                                  String                @db.VarChar(255)
  created_at                                 DateTime              @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime              @default(now()) @db.Timestamp(6)
  assessment_assessment_hr_manager_idTouser  assessment[]          @relation("assessment_hr_manager_idTouser")
  assessment_assessment_team_leader_idTouser assessment[]          @relation("assessment_team_leader_idTouser")
  company                                    company[]
  employee_assessment                        employee_assessment[]
}
